// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: NodeRPC.proto

package NodeRPC

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type IDRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *IDRequest) Reset() {
	*x = IDRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeRPC_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IDRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IDRequest) ProtoMessage() {}

func (x *IDRequest) ProtoReflect() protoreflect.Message {
	mi := &file_NodeRPC_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IDRequest.ProtoReflect.Descriptor instead.
func (*IDRequest) Descriptor() ([]byte, []int) {
	return file_NodeRPC_proto_rawDescGZIP(), []int{0}
}

func (x *IDRequest) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

type BoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *BoolResponse) Reset() {
	*x = BoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeRPC_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolResponse) ProtoMessage() {}

func (x *BoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_NodeRPC_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolResponse.ProtoReflect.Descriptor instead.
func (*BoolResponse) Descriptor() ([]byte, []int) {
	return file_NodeRPC_proto_rawDescGZIP(), []int{1}
}

func (x *BoolResponse) GetResult() bool {
	if x != nil {
		return x.Result
	}
	return false
}

type MessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg   string `protobuf:"bytes,1,opt,name=Msg,proto3" json:"Msg,omitempty"`
	MsgID string `protobuf:"bytes,2,opt,name=MsgID,proto3" json:"MsgID,omitempty"`
}

func (x *MessageRequest) Reset() {
	*x = MessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_NodeRPC_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageRequest) ProtoMessage() {}

func (x *MessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_NodeRPC_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageRequest.ProtoReflect.Descriptor instead.
func (*MessageRequest) Descriptor() ([]byte, []int) {
	return file_NodeRPC_proto_rawDescGZIP(), []int{2}
}

func (x *MessageRequest) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *MessageRequest) GetMsgID() string {
	if x != nil {
		return x.MsgID
	}
	return ""
}

var File_NodeRPC_proto protoreflect.FileDescriptor

var file_NodeRPC_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x50, 0x43, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x50, 0x43, 0x22, 0x1b, 0x0a, 0x09, 0x49, 0x44, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x49, 0x44, 0x22, 0x26, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x38, 0x0a,
	0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4d, 0x73,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4d, 0x73, 0x67, 0x49, 0x44, 0x32, 0xc6, 0x02, 0x0a, 0x08, 0x52, 0x61, 0x66, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x31, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x50, 0x43, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x50, 0x43, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x12, 0x12, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x50, 0x43, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x15, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x50, 0x43, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x52, 0x65, 0x63, 0x65, 0x69,
	0x76, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x17, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x50, 0x43, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x15, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x50, 0x43, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0d, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x72, 0x6d, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x50, 0x43, 0x2e, 0x49, 0x44, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x50, 0x43, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x17, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x4c, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x12, 0x17, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x50, 0x43, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x52, 0x50, 0x43, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_NodeRPC_proto_rawDescOnce sync.Once
	file_NodeRPC_proto_rawDescData = file_NodeRPC_proto_rawDesc
)

func file_NodeRPC_proto_rawDescGZIP() []byte {
	file_NodeRPC_proto_rawDescOnce.Do(func() {
		file_NodeRPC_proto_rawDescData = protoimpl.X.CompressGZIP(file_NodeRPC_proto_rawDescData)
	})
	return file_NodeRPC_proto_rawDescData
}

var file_NodeRPC_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_NodeRPC_proto_goTypes = []interface{}{
	(*IDRequest)(nil),      // 0: NodeRPC.IDRequest
	(*BoolResponse)(nil),   // 1: NodeRPC.BoolResponse
	(*MessageRequest)(nil), // 2: NodeRPC.MessageRequest
}
var file_NodeRPC_proto_depIdxs = []int32{
	0, // 0: NodeRPC.RaftNode.Vote:input_type -> NodeRPC.IDRequest
	0, // 1: NodeRPC.RaftNode.ResponseHeartBeat:input_type -> NodeRPC.IDRequest
	2, // 2: NodeRPC.RaftNode.ReceiveMessage:input_type -> NodeRPC.MessageRequest
	0, // 3: NodeRPC.RaftNode.ConfirmLeader:input_type -> NodeRPC.IDRequest
	2, // 4: NodeRPC.RaftNode.RedirectMessageToLeader:input_type -> NodeRPC.MessageRequest
	1, // 5: NodeRPC.RaftNode.Vote:output_type -> NodeRPC.BoolResponse
	1, // 6: NodeRPC.RaftNode.ResponseHeartBeat:output_type -> NodeRPC.BoolResponse
	1, // 7: NodeRPC.RaftNode.ReceiveMessage:output_type -> NodeRPC.BoolResponse
	1, // 8: NodeRPC.RaftNode.ConfirmLeader:output_type -> NodeRPC.BoolResponse
	1, // 9: NodeRPC.RaftNode.RedirectMessageToLeader:output_type -> NodeRPC.BoolResponse
	5, // [5:10] is the sub-list for method output_type
	0, // [0:5] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_NodeRPC_proto_init() }
func file_NodeRPC_proto_init() {
	if File_NodeRPC_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_NodeRPC_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IDRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeRPC_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_NodeRPC_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_NodeRPC_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_NodeRPC_proto_goTypes,
		DependencyIndexes: file_NodeRPC_proto_depIdxs,
		MessageInfos:      file_NodeRPC_proto_msgTypes,
	}.Build()
	File_NodeRPC_proto = out.File
	file_NodeRPC_proto_rawDesc = nil
	file_NodeRPC_proto_goTypes = nil
	file_NodeRPC_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RaftNodeClient is the client API for RaftNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftNodeClient interface {
	// rpc请求 请求的函数 (发送请求参数) returns (返回响应的参数)
	Vote(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	ResponseHeartBeat(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	ReceiveMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	ConfirmLeader(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BoolResponse, error)
	RedirectMessageToLeader(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*BoolResponse, error)
}

type raftNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftNodeClient(cc grpc.ClientConnInterface) RaftNodeClient {
	return &raftNodeClient{cc}
}

func (c *raftNodeClient) Vote(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/NodeRPC.RaftNode/Vote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) ResponseHeartBeat(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/NodeRPC.RaftNode/ResponseHeartBeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) ReceiveMessage(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/NodeRPC.RaftNode/ReceiveMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) ConfirmLeader(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/NodeRPC.RaftNode/ConfirmLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftNodeClient) RedirectMessageToLeader(ctx context.Context, in *MessageRequest, opts ...grpc.CallOption) (*BoolResponse, error) {
	out := new(BoolResponse)
	err := c.cc.Invoke(ctx, "/NodeRPC.RaftNode/RedirectMessageToLeader", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftNodeServer is the server API for RaftNode service.
type RaftNodeServer interface {
	// rpc请求 请求的函数 (发送请求参数) returns (返回响应的参数)
	Vote(context.Context, *IDRequest) (*BoolResponse, error)
	ResponseHeartBeat(context.Context, *IDRequest) (*BoolResponse, error)
	ReceiveMessage(context.Context, *MessageRequest) (*BoolResponse, error)
	ConfirmLeader(context.Context, *IDRequest) (*BoolResponse, error)
	RedirectMessageToLeader(context.Context, *MessageRequest) (*BoolResponse, error)
}

// UnimplementedRaftNodeServer can be embedded to have forward compatible implementations.
type UnimplementedRaftNodeServer struct {
}

func (*UnimplementedRaftNodeServer) Vote(context.Context, *IDRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vote not implemented")
}
func (*UnimplementedRaftNodeServer) ResponseHeartBeat(context.Context, *IDRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResponseHeartBeat not implemented")
}
func (*UnimplementedRaftNodeServer) ReceiveMessage(context.Context, *MessageRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveMessage not implemented")
}
func (*UnimplementedRaftNodeServer) ConfirmLeader(context.Context, *IDRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmLeader not implemented")
}
func (*UnimplementedRaftNodeServer) RedirectMessageToLeader(context.Context, *MessageRequest) (*BoolResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedirectMessageToLeader not implemented")
}

func RegisterRaftNodeServer(s *grpc.Server, srv RaftNodeServer) {
	s.RegisterService(&_RaftNode_serviceDesc, srv)
}

func _RaftNode_Vote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).Vote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NodeRPC.RaftNode/Vote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).Vote(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_ResponseHeartBeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).ResponseHeartBeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NodeRPC.RaftNode/ResponseHeartBeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).ResponseHeartBeat(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_ReceiveMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).ReceiveMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NodeRPC.RaftNode/ReceiveMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).ReceiveMessage(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_ConfirmLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).ConfirmLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NodeRPC.RaftNode/ConfirmLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).ConfirmLeader(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftNode_RedirectMessageToLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftNodeServer).RedirectMessageToLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/NodeRPC.RaftNode/RedirectMessageToLeader",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftNodeServer).RedirectMessageToLeader(ctx, req.(*MessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftNode_serviceDesc = grpc.ServiceDesc{
	ServiceName: "NodeRPC.RaftNode",
	HandlerType: (*RaftNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Vote",
			Handler:    _RaftNode_Vote_Handler,
		},
		{
			MethodName: "ResponseHeartBeat",
			Handler:    _RaftNode_ResponseHeartBeat_Handler,
		},
		{
			MethodName: "ReceiveMessage",
			Handler:    _RaftNode_ReceiveMessage_Handler,
		},
		{
			MethodName: "ConfirmLeader",
			Handler:    _RaftNode_ConfirmLeader_Handler,
		},
		{
			MethodName: "RedirectMessageToLeader",
			Handler:    _RaftNode_RedirectMessageToLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "NodeRPC.proto",
}
